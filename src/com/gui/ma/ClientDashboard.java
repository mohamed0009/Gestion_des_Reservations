/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.gui.ma;

import com.emsi.entities.Client;
import ma.emdi.connection.ConnectionJdbc;
import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.sql.*;
import java.text.SimpleDateFormat;
import javax.swing.table.DefaultTableModel;

public class ClientDashboard extends javax.swing.JInternalFrame {
    private final Client currentClient;
    private JTable reservationsTable;
    private JLabel totalReservationsLabel;
    private JLabel nextReservationLabel;

    /** Creates new form ClientDashboard */
    public ClientDashboard(Client client) {
        super("My Dashboard", true, true, true, true);
        this.currentClient = client;
        initComponents();
        customInitComponents();
        loadClientData();
        setSize(800, 600);
        setLocation(50, 50);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        mainPanel = new javax.swing.JPanel();
        welcomePanel = new javax.swing.JPanel();
        welcomeLabel = new javax.swing.JLabel();
        statsPanel = new javax.swing.JPanel();
        actionPanel = new javax.swing.JPanel();
        newReservationBtn = new javax.swing.JButton();
        viewStatsBtn = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("My Dashboard");

        mainPanel.setLayout(new java.awt.BorderLayout(20, 20));

        // Welcome Panel
        welcomePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        welcomeLabel.setFont(new java.awt.Font("Segoe UI", 1, 24));
        welcomePanel.add(welcomeLabel);
        mainPanel.add(welcomePanel, java.awt.BorderLayout.NORTH);

        // Stats Panel
        statsPanel.setLayout(new java.awt.GridLayout(1, 2, 20, 0));
        mainPanel.add(statsPanel, java.awt.BorderLayout.CENTER);

        // Action Panel
        actionPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 10, 5));
        newReservationBtn.setText("New Reservation");
        newReservationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newReservationBtnActionPerformed(evt);
            }
        });
        actionPanel.add(newReservationBtn);

        viewStatsBtn.setText("My Statistics");
        viewStatsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewStatsBtnActionPerformed(evt);
            }
        });
        actionPanel.add(viewStatsBtn);
        mainPanel.add(actionPanel, java.awt.BorderLayout.SOUTH);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewStatsBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_viewStatsBtnActionPerformed
        StatisticsViewer viewer = new StatisticsViewer(currentClient);
        getDesktopPane().add(viewer);
        viewer.setVisible(true);
    }// GEN-LAST:event_viewStatsBtnActionPerformed

    private void newReservationBtnActionPerformed(java.awt.event.ActionEvent evt) {
        ReservationForm form = new ReservationForm(currentClient);
        getDesktopPane().add(form);
        form.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton newReservationBtn;
    private javax.swing.JPanel statsPanel;
    private javax.swing.JButton viewStatsBtn;
    private javax.swing.JLabel welcomeLabel;
    private javax.swing.JPanel welcomePanel;
    // End of variables declaration//GEN-END:variables

    private void customInitComponents() {
        // Set up main panel
        mainPanel.setBackground(new Color(247, 248, 252));
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        // Welcome panel setup
        welcomeLabel.setText("Welcome, " + currentClient.getNom() + " " + currentClient.getPrenom());
        welcomeLabel.setFont(new Font("Segoe UI", Font.BOLD, 24));
        welcomePanel.setOpaque(false);
        mainPanel.add(welcomePanel, BorderLayout.NORTH);

        // Stats panel setup
        statsPanel.setLayout(new GridLayout(1, 2, 20, 0));
        statsPanel.setOpaque(false);

        // Initialize stats labels
        totalReservationsLabel = new JLabel("0");
        nextReservationLabel = new JLabel("None");

        // Add stats cards
        statsPanel.add(createStatsCard("Total Reservations", totalReservationsLabel));
        statsPanel.add(createStatsCard("Next Reservation", nextReservationLabel));

        // Create center panel for stats and table
        JPanel centerPanel = new JPanel(new BorderLayout(0, 20));
        centerPanel.setOpaque(false);
        centerPanel.add(statsPanel, BorderLayout.NORTH);

        // Initialize reservations table
        reservationsTable = new JTable();
        reservationsTable.setModel(new DefaultTableModel(
                new Object[][] {},
                new String[] { "Room", "Check-in", "Check-out", "Status" }));
        JScrollPane scrollPane = new JScrollPane(reservationsTable);
        centerPanel.add(scrollPane, BorderLayout.CENTER);
        mainPanel.add(centerPanel, BorderLayout.CENTER);

        // Action panel setup
        actionPanel.setLayout(new FlowLayout(FlowLayout.RIGHT, 10, 5));
        actionPanel.setOpaque(false);

        // Style buttons
        styleButton(newReservationBtn);
        styleButton(viewStatsBtn);

        mainPanel.add(actionPanel, BorderLayout.SOUTH);

        // Make everything visible
        mainPanel.setVisible(true);
        welcomePanel.setVisible(true);
        statsPanel.setVisible(true);
        actionPanel.setVisible(true);
    }

    private JPanel createStatsCard(String title, JLabel valueLabel) {
        JPanel card = new JPanel();
        card.setLayout(new BorderLayout(10, 5));
        card.setBackground(Color.WHITE);
        card.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(229, 231, 235)),
                BorderFactory.createEmptyBorder(15, 15, 15, 15)));

        JLabel titleLabel = new JLabel(title);
        titleLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        titleLabel.setForeground(new Color(107, 114, 128));

        valueLabel.setFont(new Font("Segoe UI", Font.BOLD, 24));

        card.add(titleLabel, BorderLayout.NORTH);
        card.add(valueLabel, BorderLayout.CENTER);

        return card;
    }

    private void styleButton(JButton button) {
        button.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        button.setBackground(new Color(79, 70, 229));
        button.setForeground(Color.WHITE);
        button.setBorder(BorderFactory.createEmptyBorder(8, 16, 8, 16));
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }

    public void loadClientData() {
        loadReservations();
        updateStats();
    }

    private void loadReservations() {
        new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                DefaultTableModel model = (DefaultTableModel) reservationsTable.getModel();
                model.setRowCount(0); // Clear existing rows

                String sql = "SELECT r.id, ch.telephone as room_number, r.date_debut, r.date_fin, r.status, " +
                        "cat.libelle as room_type " +
                        "FROM reservation r " +
                        "INNER JOIN chambre ch ON r.chamber_id = ch.id " +
                        "INNER JOIN categorie cat ON ch.categorie_id = cat.id " +
                        "WHERE r.client_id = ? " +
                        "ORDER BY r.date_debut DESC";

                try (Connection conn = ConnectionJdbc.getCnx();
                        PreparedStatement stmt = conn.prepareStatement(sql)) {

                    stmt.setInt(1, currentClient.getId());
                    ResultSet rs = stmt.executeQuery();

                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    int totalReservations = 0;
                    java.util.Date nextReservation = null;
                    java.util.Date today = new java.util.Date();

                    while (rs.next()) {
                        totalReservations++;
                        String roomInfo = "Room " + rs.getString("room_number") + " (" + rs.getString("room_type")
                                + ")";
                        java.sql.Date checkIn = rs.getDate("date_debut");
                        java.sql.Date checkOut = rs.getDate("date_fin");
                        String status = rs.getString("status");

                        status = status.substring(0, 1).toUpperCase() + status.substring(1).toLowerCase();

                        model.addRow(new Object[] {
                                roomInfo,
                                dateFormat.format(checkIn),
                                dateFormat.format(checkOut),
                                status
                        });

                        if (checkIn.after(today) && (nextReservation == null || checkIn.before(nextReservation))) {
                            nextReservation = checkIn;
                        }
                    }

                    totalReservationsLabel.setText(String.valueOf(totalReservations));
                    if (nextReservation != null) {
                        nextReservationLabel.setText(dateFormat.format(nextReservation));
                    } else {
                        nextReservationLabel.setText("None");
                    }

                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(ClientDashboard.this,
                            "Error loading reservations: " + e.getMessage(),
                            "Database Error",
                            JOptionPane.ERROR_MESSAGE);
                }
                return null;
            }
        }.execute();
    }

    private void updateStats() {
        String countSql = "SELECT COUNT(*) FROM reservation WHERE client_id = ?";
        String nextSql = "SELECT date_debut FROM reservation " +
                "WHERE client_id = ? AND date_debut >= CURRENT_DATE " +
                "ORDER BY date_debut ASC LIMIT 1";

        try (Connection conn = ConnectionJdbc.getCnx()) {
            try (PreparedStatement stmt = conn.prepareStatement(countSql)) {
                stmt.setInt(1, currentClient.getId());
                ResultSet rs = stmt.executeQuery();
                if (rs.next()) {
                    totalReservationsLabel.setText(String.valueOf(rs.getInt(1)));
                }
            }

            try (PreparedStatement stmt = conn.prepareStatement(nextSql)) {
                stmt.setInt(1, currentClient.getId());
                ResultSet rs = stmt.executeQuery();
                if (rs.next()) {
                    nextReservationLabel.setText(new SimpleDateFormat("dd/MM/yyyy").format(rs.getDate(1)));
                } else {
                    nextReservationLabel.setText("None");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Error updating stats: " + e.getMessage(),
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void openNewReservation() {
        ReservationForm form = new ReservationForm(currentClient);
        getDesktopPane().add(form);
        form.setVisible(true);
    }

    private void openStatistics() {
        StatisticsViewer viewer = new StatisticsViewer(currentClient);
        getDesktopPane().add(viewer);
        try {
            viewer.setMaximum(true);
        } catch (java.beans.PropertyVetoException e) {
            e.printStackTrace();
        }
        viewer.setVisible(true);
    }
}